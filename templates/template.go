// Code generated by go-bindata.
// sources:
// templates/cart.html
// templates/login.html
// templates/payment.html
// templates/register.html
// templates/shipping.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cartHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5d\x6f\xdb\x36\x14\x7d\xb6\x7e\xc5\x1d\xe1\xbd\x35\x92\xaa\x6e\x2f\x05\xa5\x61\xe8\xb6\xa7\x6d\xcd\xd6\x60\xc0\x9e\x0a\x4a\xba\xb6\x08\x53\x24\x47\x5e\x05\x71\x09\xfd\xf7\x81\xfa\xb0\x97\xc0\x48\xdc\x0e\x7d\x09\x23\xf2\x1e\xde\x73\x0e\x0f\x4d\xfe\xcd\x4f\xef\xdf\xdd\xfd\x7d\xfb\x33\x74\xd4\xab\x2a\xe1\xeb\x80\xa2\xad\x92\x0d\x27\x49\x0a\xab\x3b\xf4\x84\x3c\x9b\x3f\x92\x0d\x57\x52\x1f\xc0\xa1\x2a\x99\xa7\xa3\x42\xdf\x21\x12\x03\x3a\x5a\x2c\x19\xe1\x03\x65\x8d\xf7\x0c\x3a\x87\xbb\x92\x65\xc2\x7b\x24\xff\xc3\x4e\x2a\xd4\xa2\xc7\x92\x44\xd3\x1d\x8d\xf6\x69\x2f\x75\x3a\x15\x66\x55\xc2\xb3\xb9\x23\xaf\x4d\x7b\xac\x92\x24\x84\x16\x77\x52\x23\xb0\x46\x38\xfa\xd0\x49\x6b\xa5\xde\xb3\x71\x8c\x9c\x5c\x95\x6c\x36\x9c\x5a\x68\x94\xf0\xbe\x64\xb5\x80\xfa\xe6\xa6\x56\xa2\x39\xdc\xbc\xce\xc1\x8a\x02\xa8\x61\xd0\x18\xe5\xad\xd0\x25\x2b\x58\xf5\x8b\xc3\x49\x41\x7b\x15\xb4\x0a\xc1\x3a\xa9\x69\x07\xec\xdb\xb4\xd8\x31\x48\xc7\x71\x01\xf3\x2c\xb6\x0f\x01\x75\x3b\x8e\x4f\x79\xde\x19\x12\xea\xcb\x49\x4e\xf0\xaf\x4e\x32\xf2\xe3\x24\x6a\x85\xeb\xfe\x8d\x51\x4a\x58\x8f\x10\x1b\xb9\xe2\x71\xb3\xfb\x02\x6c\xf7\x86\x55\xc9\x26\x04\x27\xf4\x1e\x61\x7b\x78\x05\xdb\x7b\x78\x5b\x42\x7a\xeb\x4c\x3b\x34\xe4\xa3\xe4\x55\xf3\x15\xcc\x63\xd5\x86\xef\x8c\xeb\xa1\x47\xea\x4c\x5b\x32\x6b\x3c\x2d\x0b\x1b\x2e\xb5\x1d\x68\xc9\x53\x27\xdb\x16\x35\x83\x29\x3b\xec\xe3\x5c\xcf\xe0\x5e\xa8\x01\x4b\xd6\xa2\x42\xc2\x2b\x80\x52\xb7\xf8\x70\x82\x85\xb0\x3d\x8c\xe3\x09\x56\x0f\x44\x46\x2f\x38\x3f\xd4\xbd\x24\x56\x3d\xf0\x6c\x9e\x5f\xe8\x66\x91\xef\x2c\x70\x39\xa2\xab\x95\x7a\x72\x46\xef\xab\x10\xd2\xdf\x45\x8f\xf1\x98\x96\x19\x5e\xbb\x6c\xae\x39\x99\xab\x5f\xc1\xb6\x9f\xcc\x7d\x6f\x49\x1a\x3d\x7b\x3b\x55\x80\xdc\x01\xfe\x03\xdb\x7e\xda\x06\x98\x97\x9f\x90\xc1\xba\x7e\x27\x7a\xa1\x3b\xf3\x16\xd6\xf2\xf9\xf4\x97\x8f\x6d\x9f\xfe\x15\xb5\x2f\x33\xff\x59\xfd\x0c\x35\x21\xa4\xb7\x4e\x36\x78\x0a\xda\x92\xb4\xf3\x76\x21\x10\xf6\x56\x09\x7a\x7a\x73\x21\x5d\xff\xbd\x54\x36\x5f\x1c\x48\xa7\x31\xe6\x33\x9b\x02\xfa\x28\xc3\x51\xfd\x9e\x20\xfd\x63\x10\x9a\x24\x1d\x21\x8f\xd2\x9f\xee\x34\x5d\x83\x08\x53\x3e\x6a\xe5\xb6\xfa\x80\x03\x34\xc2\x39\xa9\x3b\x03\xe8\x49\xc0\xbd\xf8\x24\x0d\xcf\xec\x79\xfb\xcb\x59\x7c\x26\x4e\xfe\x30\x9c\xc2\xf4\xba\x78\x33\xfd\x86\x3d\x57\x1f\xff\x9e\x00\x3f\x6a\x54\xf0\x27\xb6\x46\xb7\x06\x7e\xc5\x7d\x94\xfe\x02\xde\x46\xdb\xcf\x1d\xf3\x3c\x2d\x5e\xc4\x98\x29\x3f\x1f\xe7\x94\xac\xc8\xef\x17\xd8\xc5\xc8\x0b\x8d\xea\x9c\xfa\x35\xf1\xff\xcf\x9d\xef\xf2\x97\x99\x3e\x72\xe7\x9d\x51\xc2\xc1\x6f\x42\xa3\x74\xe6\x33\x8d\x29\xf2\x3c\xcd\xbf\xc8\x98\xe2\x59\x63\x9a\xc8\xe9\x92\x33\xb6\xe2\x62\x7d\xe8\xac\xd8\x0b\x97\xb1\x6a\x1a\x79\x26\xaa\x29\x62\x09\xcf\xe6\x37\x8d\x67\xd3\xdb\xfa\x6f\x00\x00\x00\xff\xff\x70\x8c\x0c\xec\x72\x07\x00\x00")

func cartHtmlBytes() ([]byte, error) {
	return bindataRead(
		_cartHtml,
		"cart.html",
	)
}

func cartHtml() (*asset, error) {
	bytes, err := cartHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cart.html", size: 1906, mode: os.FileMode(436), modTime: time.Unix(1518962045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _loginHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xc1\x8e\x14\x21\x10\x86\xcf\xf0\x14\x48\xe6\x68\x9a\xfb\xa6\x9a\x3d\xe8\xe8\x51\x13\xf7\xe2\xb1\x66\xba\x66\x9a\x2c\x0d\x1d\xa8\x1e\x9d\x90\x7e\x1a\x1f\xc5\x17\x33\x80\xb3\xf1\xe2\x89\x54\xea\xff\xbf\xaa\x3f\x05\xbc\xfb\xf8\xe5\xc3\xcb\xf7\xaf\x47\x35\xf3\xe2\xad\x84\xc7\x43\x38\x59\x29\x80\x1d\x7b\xb2\x2f\x94\x99\xc0\xf4\x42\x0a\xf0\x2e\xbc\xaa\x44\x7e\xd4\x99\xef\x9e\xf2\x4c\xc4\x5a\xf1\x7d\xa5\x51\x33\xfd\x64\x73\xce\x59\xab\x39\xd1\x65\xd4\x06\x73\x26\xce\xcf\x17\xe7\x29\xe0\x42\x23\xe3\x79\xbe\xc7\x90\x87\xc5\x85\xa1\x09\x8d\x95\x60\xfa\x44\x38\xc5\xe9\x6e\xa5\x14\xb0\x79\x2b\x45\x29\x09\xc3\x95\xd4\xe1\xf5\xbd\x3a\xdc\xd4\xd3\xa8\x86\x4f\x31\x2d\xc7\x94\x62\xca\xfb\x2e\x45\xdd\xc5\x96\x72\xb8\xed\x3b\x18\xef\x9a\x85\xc2\x54\x5b\x60\x2a\x42\x0a\x58\x6d\x29\xc3\x67\x0a\x94\xd0\x37\x67\xd5\xae\xad\x75\x89\x69\x51\x0b\xf1\x1c\xa7\x51\xaf\x31\xb3\xb6\x95\xb9\xda\xe3\x82\xce\x3f\xc1\x29\xd5\xe5\x84\x10\xe0\xc2\xba\xf1\x3f\x11\xb5\x6a\x61\x34\x55\xa1\x56\x37\xf4\x1b\x8d\xba\x94\xa1\x39\xf7\xbd\x83\xea\x98\xc6\xfb\x46\x61\xc6\xff\xf1\x56\xcc\xf9\x47\x4c\xd3\x83\xf9\x56\xbf\x31\x3a\x04\x4e\x1b\x73\x0c\x7f\x5d\x79\x3b\x2d\x8e\xb5\xf5\xf1\xea\x02\x98\xde\xb3\x7d\x24\x98\x9a\xcc\xb6\xf0\x80\x8f\x4b\x9c\x71\xc2\xcc\x29\x3e\x27\x9a\x5c\xa2\x33\x8f\x66\xc5\x2b\x26\x6d\xc3\xef\x5f\x51\x31\x85\x39\xaa\x87\x08\x0c\x76\x18\x98\x7e\x13\x30\xed\x6f\xfc\x09\x00\x00\xff\xff\x0f\x29\xc1\xc3\x32\x02\x00\x00")

func loginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_loginHtml,
		"login.html",
	)
}

func loginHtml() (*asset, error) {
	bytes, err := loginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "login.html", size: 562, mode: os.FileMode(436), modTime: time.Unix(1518962054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _paymentHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xcf\x8e\xd3\x30\x10\xc6\xcf\xc9\x53\x04\x83\xb4\xed\x81\x44\xd5\x1e\x71\x82\x50\x77\x2f\x1c\x76\x2b\xb5\x17\x4e\xc8\xb5\xa7\x89\x17\xff\xc3\x9e\xac\x88\xaa\xbe\x3b\x72\x42\x4b\xa1\x45\x6b\xf6\xe2\xba\xf1\x37\xbf\x6f\xe2\x99\x0c\x7d\x73\xf7\xb8\xdc\x7c\x59\xdd\x17\x1d\x6a\xd5\xe4\xf4\xf8\x03\x4c\x34\x79\x46\x51\xa2\x82\x66\x03\x01\x81\x56\xd3\x9f\x3c\xa3\x4a\x9a\x6f\x85\x07\x55\x93\x80\x83\x82\xd0\x01\x20\x29\x70\x70\x50\x13\x84\x1f\x58\xf1\x10\x48\xd1\x79\xd8\xd5\xa4\x62\x21\x00\x86\x8f\x3b\xa9\xc0\x30\x0d\x35\x32\xde\x0d\xd6\x84\x52\x4b\x53\x8e\xc2\x2a\x32\x03\xf7\xd2\x61\x11\x3c\xaf\xc9\x7e\x5f\xae\x58\xbb\x86\xb6\xf7\xf6\x33\x7b\x66\xd3\xd9\xe1\x40\x1a\x5a\x4d\xfb\xbf\x23\x2e\x5c\x9e\xbe\xf7\xe0\x87\xf7\xb7\xe5\x6d\xb9\x18\x9d\x9e\xc2\x7f\x44\x3b\xd6\x86\xd1\xbd\x74\xaa\x6f\xff\x19\xdd\xe4\x59\xf6\x6e\x26\x2c\xef\x35\x18\x9c\x97\x1e\x98\x18\x66\xbb\xde\x70\x94\xd6\xcc\xe6\xc5\x3e\xcf\xa2\xe2\xe6\xad\x63\x2d\x8b\x1a\x7b\x33\x2f\x4f\xf0\xd9\xfc\x43\x9e\x65\x87\xb8\xfe\x66\xd3\x6a\xba\x7b\xba\xb5\x62\x88\x56\xdd\xa2\x59\x1d\xa3\x69\xd5\x2d\xe2\xb3\x9d\xf5\xba\xd0\x80\x9d\x15\x35\x59\x3d\xae\x37\x24\xa6\x42\x5d\x43\xa5\x71\x3d\x9e\x95\x82\x14\xe3\x0b\x91\xb8\x92\xe2\x99\xa9\x1e\xc6\xfb\x5d\xf6\x01\xad\x06\x5f\x3e\x30\x0d\x87\x43\x2c\x02\xad\xdc\x4b\x14\xd0\x4c\xaa\xab\x98\xfb\x78\x72\xc6\x79\x01\x14\xd0\x8f\x3d\x73\x85\xb4\xee\xa4\x73\xd2\xb4\x9f\x84\xf0\x10\x42\xb9\x1e\xa5\xc9\x29\x9a\x5e\x6f\xc1\x27\x91\x1f\x46\x69\x32\x99\x5b\xed\x14\xc4\x3a\x24\xd1\x97\x27\x79\xb2\x83\x90\x01\xbd\xe4\x69\xfc\xbb\x5f\xe2\xf4\xfc\x25\x0e\x69\x99\x4b\x1c\x92\xa9\x01\x19\x5e\xef\xac\xcb\x42\x32\x4c\x6f\x35\x6e\x7b\x83\x3e\x31\xe1\x49\x9b\xcc\x76\x36\x20\x53\x5f\xb9\x15\x69\x99\xaf\x46\xfd\xd2\x0a\xb8\xe8\xf0\xf8\x81\x53\xc5\xb6\xa0\xfe\xb4\xf3\x4c\x48\x7b\xf4\xd3\x80\x56\xd8\x93\xd5\xd6\x2a\x40\x4b\x9a\x62\xda\xd0\x6a\x8a\x7f\x0d\x8a\x33\x8f\x2c\xa2\xa6\xcd\x19\x6a\xba\x06\x5a\xc5\x51\x11\xa7\xca\x34\x4e\x68\x35\x0e\xf8\x9f\x01\x00\x00\xff\xff\x56\xf6\x30\x5e\xf7\x05\x00\x00")

func paymentHtmlBytes() ([]byte, error) {
	return bindataRead(
		_paymentHtml,
		"payment.html",
	)
}

func paymentHtml() (*asset, error) {
	bytes, err := paymentHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "payment.html", size: 1527, mode: os.FileMode(436), modTime: time.Unix(1518982440, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _registerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x3f\x6f\x23\x21\x10\xc5\x6b\xf8\x14\x1c\x72\x79\x5a\xfa\xd3\x2c\x57\xdc\x39\x29\x93\xc2\x4d\x4a\xec\x1d\x67\x91\xf9\x27\x18\x3b\x59\xad\xf6\xbb\x47\xb0\xb1\x12\x47\x91\xd2\x80\x46\xf3\x7e\x6f\x78\x03\xfc\xfa\xff\xf0\x6f\xf7\xf4\xb8\x15\x23\x79\xa7\x39\x5c\x2f\x34\x83\xe6\x0c\xc8\x92\x43\xbd\xc3\x42\x08\x6a\x2d\x38\x03\x67\xc3\x49\x64\x74\xbd\x2c\x34\x39\x2c\x23\x22\x49\x41\x53\xc2\x5e\x12\xbe\x92\x3a\x94\x22\xc5\x98\xf1\xd8\x4b\x65\x4a\x41\x2a\x7f\x8f\xd6\x61\x30\x1e\x7b\x32\x87\x71\x8a\xa1\x74\xde\x86\xae\x09\x95\xe6\xa0\xd6\x89\xb0\x8f\xc3\xa4\x39\x67\x70\x76\x9a\xb3\x79\xce\x26\x3c\xa3\xd8\x9c\x7e\x8b\xcd\x45\xfc\xe9\x45\x77\x17\xb3\xdf\xe6\x1c\x73\x59\x16\xce\xea\x5b\xf4\x3c\x6f\x2e\xcb\x02\xca\xd9\x86\x60\x18\x6a\x0b\x54\xb5\xe0\x0c\x92\x9e\xe7\xee\x1e\x03\x66\xe3\x1a\x59\xb5\x49\x73\xc6\x19\x1c\x63\xf6\xc2\x23\x8d\x71\xe8\x65\x8a\x85\xa4\x6e\x44\x88\x1e\xc5\x21\xfa\xe4\x90\x22\xec\xb3\xd2\x75\x96\x0d\xe9\x4c\x9f\x72\x4a\xd1\x12\xc9\x7a\xb6\x18\x6c\x35\x86\xa4\xb7\xde\x58\xf7\x23\x88\x55\xf5\x85\x4c\xa6\x94\x97\x98\x87\x6f\xe1\x6b\xf3\x6a\xf0\x51\xdf\x78\xdc\x30\xe5\xbc\xf7\x96\xaa\xe2\xbd\xaf\x6a\xea\xba\xf3\x75\xd9\xa0\xda\xa7\xbf\x05\x00\x00\xff\xff\xd2\xc7\x9e\x97\x0b\x02\x00\x00")

func registerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_registerHtml,
		"register.html",
	)
}

func registerHtml() (*asset, error) {
	bytes, err := registerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "register.html", size: 523, mode: os.FileMode(436), modTime: time.Unix(1518962067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shippingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4d\x6e\x83\x30\x10\x85\xd7\x70\x0a\xd7\x07\x88\x2f\x60\x5c\x35\x94\x6d\x1b\x55\xd9\x74\x69\xf0\x44\x58\xf5\x0f\xf2\x0c\x55\x39\x51\xef\xd0\x6d\x2e\x56\x61\xda\x34\x65\x43\x56\x08\xf4\xbe\x79\x8f\x99\x27\xef\x1e\x9f\xeb\xe3\xeb\xa1\x61\x3d\x79\xa7\x4a\xf9\xfb\x00\x6d\x54\x59\x48\xb2\xe4\x40\x1d\x01\x09\xa4\x58\x5e\xca\x42\x3a\x1b\xde\x58\x02\x57\x71\xa4\xc9\x01\xf6\x00\xc4\x19\x4d\x03\x54\x9c\xe0\x83\x44\x87\xc8\x59\x9f\xe0\x54\x71\xa1\x11\x81\xf0\xfe\x64\x1d\x04\xed\xa1\x22\xdd\xf5\x53\x0c\xb8\xf3\x36\xec\xb2\x50\xa8\x52\x8a\xc5\x51\xb6\xd1\x4c\xb3\xc5\x29\x26\xcf\x3c\x50\x1f\x4d\xc5\x87\x88\xc4\x55\x59\x14\x72\x50\x4d\x30\x90\xe0\xfc\x19\x65\x9b\x44\xfe\x66\xc3\x30\xd2\x95\x3b\x67\xd9\x87\x23\xa5\x9c\x4b\x28\x29\x86\x59\xb9\x0c\x78\x3a\x7f\x79\x48\xdb\x78\x18\x7d\x0b\xe9\x82\x2f\x70\x1d\xfd\xe0\xc0\x43\xa0\xed\x01\xdd\x45\xbb\x1a\xb2\xd7\x36\xdd\x10\xc0\x58\xa4\x64\xbb\x35\x5d\x5b\xa3\x0d\x6c\xbb\x5b\x9a\x56\x64\x83\xa4\xcd\x2d\x7b\xd3\x04\xff\xd0\x6b\x65\x6f\x8d\x81\xf0\xf7\x8f\x63\xa0\x34\x71\xf6\xae\xdd\x08\x15\xdf\xbf\x3c\xe4\x7b\xfe\x44\x6d\x0e\x9b\x6e\xf3\x6d\xb5\xab\xa3\x81\x55\xda\xb2\x58\x51\x38\xb6\xde\xe6\x6d\xcc\x82\x7c\x52\x29\xe6\x9e\xcc\xf5\x59\x7a\x23\x45\xee\xef\x77\x00\x00\x00\xff\xff\x41\x66\x31\xea\xd6\x02\x00\x00")

func shippingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_shippingHtml,
		"shipping.html",
	)
}

func shippingHtml() (*asset, error) {
	bytes, err := shippingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shipping.html", size: 726, mode: os.FileMode(436), modTime: time.Unix(1518962072, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cart.html": cartHtml,
	"login.html": loginHtml,
	"payment.html": paymentHtml,
	"register.html": registerHtml,
	"shipping.html": shippingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"cart.html": &bintree{cartHtml, map[string]*bintree{}},
	"login.html": &bintree{loginHtml, map[string]*bintree{}},
	"payment.html": &bintree{paymentHtml, map[string]*bintree{}},
	"register.html": &bintree{registerHtml, map[string]*bintree{}},
	"shipping.html": &bintree{shippingHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

