// Code generated by go-bindata.
// sources:
// templates/cart.html
// templates/login.html
// templates/payment.html
// templates/register.html
// templates/shipping.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cartHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xdc\x36\x10\x3d\xaf\x7e\xc5\x94\xd8\xde\x62\x71\xa3\xb4\x97\x80\x12\x50\xa4\xed\xa9\x6d\xdc\xc6\x28\xd0\x53\x40\x49\xb3\x2b\x62\x29\x92\x25\x47\x86\x37\x84\xfe\x7b\x41\x7d\xac\x6b\xc3\xb0\x37\x2e\x7a\x31\x2d\x72\x1e\xe7\xbd\xc7\xc7\xa5\xf8\xe6\xc7\x8f\x1f\x6e\xfe\xba\xfe\x09\x3a\xea\x75\x95\x89\x75\x40\xd9\x56\xd9\x46\x90\x22\x8d\xd5\x0d\x06\x42\xc1\xe7\x8f\x6c\x23\xb4\x32\x47\xf0\xa8\x4b\x16\xe8\xa4\x31\x74\x88\xc4\x80\x4e\x0e\x4b\x46\x78\x47\xbc\x09\x81\x41\xe7\x71\x5f\x32\x2e\x43\x40\x0a\x9c\x64\xd3\x9d\xac\x09\x79\xaf\x4c\x3e\xad\xf3\x2a\x13\x7c\x6e\x24\x6a\xdb\x9e\xaa\x2c\x8b\xb1\xc5\xbd\x32\x08\xac\x91\x9e\x3e\x75\xca\x39\x65\x0e\x6c\x1c\x13\x15\x5f\x65\x9b\x8d\xa0\x16\x1a\x2d\x43\x28\x59\x2d\xa1\xbe\xba\xaa\xb5\x6c\x8e\x57\x6f\x77\xe0\x64\x01\xd4\x30\x68\xac\x0e\x4e\x9a\x92\x15\xac\xfa\xd9\xe3\x44\xbc\xbd\x08\x5a\xc5\xe8\xbc\x32\xb4\x07\xf6\x6d\x5e\xec\x19\xe4\xe3\xb8\x80\x05\x4f\xed\x63\x44\xd3\x8e\xe3\x63\x9e\x37\x96\xa4\x7e\x3d\xc9\x09\xfe\xbf\x93\x4c\xfc\x04\xc9\x5a\xe3\xba\x7f\x63\xb5\x96\x2e\x20\xa4\x46\xbe\x78\xd8\xec\xb6\x00\xd7\xbd\x63\x55\xb6\x89\xd1\x4b\x73\x40\xd8\x1e\xdf\xc0\xf6\x16\xde\x97\x90\x5f\x7b\xdb\x0e\x0d\x85\x24\x79\xd5\x7c\x01\xf3\x54\xb5\x11\x7b\xeb\x7b\xe8\x91\x3a\xdb\x96\xcc\xd9\x40\xcb\xc2\x46\x28\xe3\x06\x5a\x62\xd4\xa9\xb6\x45\xc3\xc0\xc8\x1e\x4b\xf6\x79\xae\x67\x70\x2b\xf5\x80\x25\x6b\x51\x23\xe1\x05\x40\x65\x5a\xbc\x3b\xc3\x62\xdc\x1e\xc7\xf1\x0c\xab\x07\x22\x6b\x16\x5c\x18\xea\x5e\x11\xab\xee\x04\x9f\xe7\x17\xba\x3c\xf1\x9d\x05\x2e\x47\x74\xb1\xd2\x40\xde\x9a\x43\x15\x63\xfe\x9b\xec\x31\x1d\xd3\x32\x23\x6a\xcf\xe7\x9a\xb3\xb9\xe6\x0d\x6c\xfb\xc9\xdc\x8f\x8e\x94\x35\xb3\xb7\x53\x05\xa8\x3d\xe0\xdf\xb0\xed\xa7\x6d\x80\x05\xf5\x05\x19\xac\xeb\x37\xb2\x97\xa6\xb3\xef\x61\x2d\x9f\x4f\x7f\xf9\xd8\xf6\xf9\x9f\x49\xfb\x32\xf3\xaf\xd5\xaf\x50\x13\x63\x7e\xed\x55\x83\xe7\xa0\x2d\x49\xbb\xdf\x2e\x46\xc2\xde\x69\x49\x8f\x6f\x2e\xe4\xeb\xbf\x4f\x95\xcd\x17\x07\xf2\x69\x4c\xf9\xe4\x53\x40\x1f\x64\x38\xa9\x3f\x10\xe4\xbf\x0f\xd2\x90\xa2\x13\xec\x92\xf4\xc7\x3b\x4d\xd7\x20\xc1\x74\x48\x5a\x85\xab\x3e\xe1\x00\x8d\xf4\x5e\x99\xce\x02\x06\x92\x70\x2b\xbf\x28\x2b\xb8\xbb\xdf\xfe\xe9\x2c\x3e\x13\xa7\x70\x1c\xce\x61\x7a\x5b\xbc\x9b\x7e\xc3\x9e\xab\x4f\x7f\xcf\x80\x1f\x0c\x6a\xf8\x03\x5b\x6b\x5a\x0b\xbf\xe0\x21\x49\x7f\x01\xef\x92\xed\xf7\x1d\x77\xbb\xbc\x78\x11\x63\xa7\xfc\x7c\x9e\x53\xb2\x22\xbf\x5f\x60\x4f\x46\x5e\x1a\xd4\xf7\xa9\x5f\x13\xff\xdf\xdc\xf9\x6e\xf7\x32\xd3\x07\xee\x7c\xb0\x5a\x7a\xf8\x55\x1a\x54\xde\x7e\xa5\x31\xc5\x6e\x97\xef\x5e\x65\x4c\xf1\xac\x31\x4d\xe2\xf4\x94\x33\xae\x12\x72\x7d\xdf\x9c\x3c\x48\xcf\x59\x35\x8d\x82\xcb\x6a\x8a\x58\x26\xf8\xfc\xa6\x09\x3e\x3d\xa9\xff\x04\x00\x00\xff\xff\x75\xc0\x0a\xc8\x69\x07\x00\x00")

func cartHtmlBytes() ([]byte, error) {
	return bindataRead(
		_cartHtml,
		"cart.html",
	)
}

func cartHtml() (*asset, error) {
	bytes, err := cartHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cart.html", size: 1897, mode: os.FileMode(436), modTime: time.Unix(1517797909, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _loginHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x4d\x4e\xe4\x30\x10\x85\xd7\xce\x29\x3c\x3e\x40\x7b\x3f\xaa\x78\x16\x43\xaf\x41\xa2\x37\x2c\x2b\x49\x75\xc7\xc2\x7f\x72\x55\x80\x9c\x87\xa3\x70\x31\x94\x76\x47\x20\x21\x56\x76\xa9\xde\xfb\x9e\xfc\x0c\x7f\xee\xee\xff\x9f\x9e\x1e\x8e\x7a\x96\x18\x5c\x07\xfb\x41\x38\xb9\x4e\x81\x78\x09\xe4\x4e\xc4\x42\x60\xdb\xd0\x29\x08\x3e\x3d\xeb\x4a\xa1\x37\x2c\x6b\x20\x9e\x89\xc4\x68\x59\x0b\xf5\x46\xe8\x4d\xec\xc8\x6c\xf4\x5c\xe9\xdc\x1b\x8b\xcc\x24\x6c\x05\xc7\x79\xcd\x89\x0f\xd1\xa7\xc3\x75\x6f\x5d\x07\xb6\x05\xc1\x90\xa7\xd5\x75\x9d\x82\x73\xae\x51\x47\x92\x39\x4f\xbd\x29\x99\xc5\xb8\x4e\x29\x28\xee\x18\xd1\x87\xbf\x30\xd4\xcd\xa7\x94\x02\x9f\xca\x22\xdf\x42\x8d\x4e\x18\xa9\x37\xb4\x09\x8d\x7e\xc1\xb0\x50\x6f\x9a\xdd\x96\x1b\xe5\x91\xd2\x8c\xbf\x51\x0a\x32\xbf\xe6\x3a\xed\xa4\xaf\xf9\x07\xac\xd1\x60\x58\x44\x72\xba\xd9\x79\x19\xa2\x17\xe3\x42\xbe\xf8\x04\xb6\xed\x5c\xcb\x06\xbb\x3d\x6c\xbb\x14\x07\xb8\x57\x33\xe2\x84\x2c\x35\xff\xab\x34\xf9\x4a\xa3\xf4\xb6\xe0\x05\xab\x71\xe9\xe3\x3d\x6b\xa1\x34\x67\xbd\x8b\xc0\x62\x83\x81\x6d\x6d\x81\xbd\x7e\xd6\x67\x00\x00\x00\xff\xff\xcd\x6d\x16\x97\xc3\x01\x00\x00")

func loginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_loginHtml,
		"login.html",
	)
}

func loginHtml() (*asset, error) {
	bytes, err := loginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "login.html", size: 451, mode: os.FileMode(436), modTime: time.Unix(1517794180, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _paymentHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8e\xb1\x0e\x83\x30\x10\x43\x67\xf2\x15\x69\x3e\x80\x13\xfb\x91\xa5\xed\x5c\x06\x96\x8e\x29\xb8\x0d\x6a\x08\x15\x77\x43\xf3\xf7\x15\xa0\x4e\x96\xf5\x2c\xdb\x7c\xba\xdc\xce\xfd\xbd\xbb\xda\xa8\x73\xf2\x86\xff\x82\x30\x7a\x53\xb1\x4e\x9a\xe0\x7b\x88\x82\xe9\x30\xa6\xe2\x34\xe5\xb7\x5d\x91\x5a\x27\x5a\x12\x24\x02\xea\xac\x96\x0f\x5a\xa7\xf8\x2a\x0d\x22\xce\xc6\x15\xcf\xd6\x51\x10\x81\x0a\x69\x18\x62\x59\xb2\xd4\xf3\x94\xeb\x9d\x93\x37\x4c\xc7\x10\x3f\x96\xb1\x6c\xcd\xb1\xf1\x5d\x78\x85\x19\x59\x17\xa6\xd8\x6c\x91\x83\x31\xed\xd7\x7e\x01\x00\x00\xff\xff\x68\x73\xfc\x57\xb1\x00\x00\x00")

func paymentHtmlBytes() ([]byte, error) {
	return bindataRead(
		_paymentHtml,
		"payment.html",
	)
}

func paymentHtml() (*asset, error) {
	bytes, err := paymentHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "payment.html", size: 177, mode: os.FileMode(436), modTime: time.Unix(1517691276, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _registerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4d\x4e\xc4\x30\x0c\x85\xd7\xed\x29\x42\x0e\x30\xbe\x80\x93\x0d\xcc\x1a\x16\xb3\x61\x99\xb6\x1e\x25\x22\x7f\x8a\x3d\x82\xde\x1e\xa5\xa5\x82\x41\x48\x6c\x12\x39\xcf\xef\xb3\xf2\x8c\x0f\x4f\xcf\x8f\x97\xd7\x97\xb3\xf2\x92\xa2\x1d\xf1\xb8\xc8\x2d\x76\x1c\x50\x82\x44\xb2\x17\x62\x21\x84\xbd\x18\x07\x8c\x21\xbf\xa9\x46\xd1\x68\x96\x35\x12\x7b\x22\xd1\x4a\xd6\x4a\x46\x0b\x7d\x08\xcc\xcc\x5a\xf9\x46\x57\xa3\xc1\x31\x93\x30\x88\x9b\xfd\x5a\x32\x9f\x52\xc8\xa7\x4d\x07\x3b\x22\xec\x83\x70\x2a\xcb\xda\xc9\xd7\xd2\x92\x4a\x24\xbe\x2c\x46\xd7\xc2\xa2\xfb\x6b\xb5\xb9\x24\x52\x73\x49\x35\x92\x14\x9c\x1a\xd8\x71\x18\x30\xe4\x7a\x93\x1f\x73\xb5\xca\x2e\x91\xd1\xfd\xdc\xf8\x03\x42\xdd\x01\xe7\xe4\x42\xfc\xd7\x48\xbd\xeb\x97\xb3\x3a\xe6\xf7\xd2\x96\x3f\xcd\x87\x78\x00\xbe\xeb\x3b\xc6\x9d\x87\x6f\x53\x0a\xd2\x3b\xbe\x74\xe8\xbf\xee\x61\xec\x29\x20\x6c\x4b\xf8\x0c\x00\x00\xff\xff\x9b\xc0\x4c\x1e\x9b\x01\x00\x00")

func registerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_registerHtml,
		"register.html",
	)
}

func registerHtml() (*asset, error) {
	bytes, err := registerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "register.html", size: 411, mode: os.FileMode(436), modTime: time.Unix(1517772806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shippingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6e\xa3\x30\x14\x5e\xc3\x29\x3c\x3e\x40\x7c\x01\x63\x69\xc2\xb0\x9d\x89\x46\xd9\x74\x69\xf0\x8b\xb0\xea\x1f\xe4\xf7\xa8\xca\x89\x7a\x87\x6e\x73\xb1\xca\xa6\x4d\x53\x36\x64\x85\xb0\xbf\x3f\xbf\xf7\xc9\x5f\x7f\xfe\xb5\xe7\xa7\x53\xc7\x46\xf2\x4e\xd5\xf2\xeb\x03\xda\xa8\xba\x92\x64\xc9\x81\x3a\x03\x12\x48\xb1\xfe\xd4\x95\x74\x36\x3c\xb3\x04\xae\xe1\x48\x8b\x03\x1c\x01\x88\x33\x5a\x26\x68\x38\xc1\x2b\x89\x01\x91\xb3\x31\xc1\xa5\xe1\x42\x23\x02\xa1\x20\x3d\x8c\x4b\x0c\x78\xf0\x36\x1c\xca\xbd\x50\xb5\x14\xab\x91\xec\xa3\x59\xb2\xf2\x25\x26\xcf\x3c\xd0\x18\x4d\xc3\xa7\x88\xc4\x55\x5d\x55\x72\x52\x5d\x30\x90\xe0\xfa\x16\x65\x9f\x44\x39\xb3\x61\x9a\xe9\xce\x94\xb3\xa0\x3d\xe4\x48\xa9\xc4\x11\x4a\x8a\x29\x23\x57\x81\xbf\xd7\x77\x0f\x69\x9f\x1e\x66\xdf\x43\xba\xd1\x57\x72\x1b\xfd\xe4\xc0\x43\xa0\x7d\x81\xe1\x86\xdd\x88\x1c\xb5\x4d\x0f\x04\x30\x16\x29\xd9\x61\xcb\x6e\xad\xd1\x06\xf6\xdd\x2d\x2d\x1b\x66\x87\xa4\xcd\x23\x73\xd3\x04\x3f\xa8\xf7\xc8\xd1\x1a\x03\xe1\xfb\x8d\x73\xa0\xb4\x70\xf6\xa2\xdd\x0c\x0d\x3f\xfe\xff\x5d\xf6\xf9\x19\xb5\x3b\xed\xba\xe5\xdd\x6a\xd7\x46\x03\x9b\xb4\x75\xb5\x61\xe1\xdc\x7b\x5b\xa6\x91\x01\x65\xa5\x52\xe4\x9e\xe4\xfa\xac\xbd\x91\xa2\xd4\xf6\x23\x00\x00\xff\xff\x8a\x5e\xe3\xdd\xcd\x02\x00\x00")

func shippingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_shippingHtml,
		"shipping.html",
	)
}

func shippingHtml() (*asset, error) {
	bytes, err := shippingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shipping.html", size: 717, mode: os.FileMode(436), modTime: time.Unix(1517777825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cart.html": cartHtml,
	"login.html": loginHtml,
	"payment.html": paymentHtml,
	"register.html": registerHtml,
	"shipping.html": shippingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"cart.html": &bintree{cartHtml, map[string]*bintree{}},
	"login.html": &bintree{loginHtml, map[string]*bintree{}},
	"payment.html": &bintree{paymentHtml, map[string]*bintree{}},
	"register.html": &bintree{registerHtml, map[string]*bintree{}},
	"shipping.html": &bintree{shippingHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

